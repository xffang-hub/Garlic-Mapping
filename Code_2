var roi = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[116.28771276795948, 35.056951155038156],
                  [116.28771276795948, 34.99341194825911],
                  [116.36118383729541, 34.99341194825911],
                  [116.36118383729541, 35.056951155038156]]], null, false),
            {
              "system:index": "0"
            })]);
//********************
//Code 2:Instructions For Use
//You should write the Line-214 with your Assets file path of map_winter_wheat before running.
//map_winter_wheat is generated in Code1.
Map.centerObject(roi,8);
Map.addLayer(roi, {color: "red",optional:1},'roi');
 
//Landsat8 SR
function rmCloud(image) {
  var cloudShadowBitMask = (1 << 3);
  var cloudsBitMask = (1 << 5);
  var qa = image.select("pixel_qa");
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image.updateMask(mask);
}

function scaleImage(image) {
  var time_start = image.get("system:time_start");
  //image = image.multiply(0.0001);
  image = image.set("system:time_start", time_start);
  return image;
}
//NDVI
function NDVI(image) {
  return image.addBands(
    image.normalizedDifference(["B5", "B4"])
         .rename("NDVI"));
}

function I_GCVI(img) {
  var nir = img.select("B5");
  var red = img.select("B4");
  var green = img.select("B3");
  var i_gcvi = img.expression(
    "B5/B3-(B4/B5)*15",
    {
      "B5": nir,
      "B4": red,
      "B3": green
    }
  );
  return img.addBands(i_gcvi.rename("I_GCVI"));
}


var bands=["NDVI"];
var l8_1910 = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
              .filterBounds(roi)
              .filterDate("2019-10-1", "2020-10-31")
              .filter(ee.Filter.lte("CLOUD_COVER", 50))
              //.map(rmCloud)
              .map(scaleImage)
              .map(NDVI)
              .select(bands)
              .map(function(image) {
                    return image.clip(roi);
                  })
              .sort("system:time_start")
              .median();
var l8_1911 = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
              .filterBounds(roi)
              .filterDate("2019-11-1", "2020-11-30")
              .filter(ee.Filter.lte("CLOUD_COVER", 50))
              //.map(rmCloud)
              .map(scaleImage)
              .map(NDVI)
              .select(bands)
              .map(function(image) {
                    return image.clip(roi);
                  })
              .sort("system:time_start")
              .median();
var l8_200218 = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
              .filterBounds(roi)
              .filterDate("2020-02-12", "2020-02-28")
              .filter(ee.Filter.lte("CLOUD_COVER", 50))
              //.map(rmCloud)
              .map(scaleImage)
              .map(NDVI)
              .select(bands)
              .map(function(image) {
                    return image.clip(roi);
                  })
              .sort("system:time_start")
              .median();
var l8_200321 = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
              .filterBounds(roi)
              .filterDate("2020-03-15", "2020-03-31")
              .filter(ee.Filter.lte("CLOUD_COVER", 50))
              //.map(rmCloud)
              .map(scaleImage)
              .map(NDVI)
              .select(bands)
              .map(function(image) {
                    return image.clip(roi);
                  })
              .sort("system:time_start")
              .median();
var l8_200422 = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
              .filterBounds(roi)
              .filterDate("2020-04-16", "2020-04-30")
              .filter(ee.Filter.lte("CLOUD_COVER", 50))
              //.map(rmCloud)
              .map(scaleImage)
              .map(NDVI)
              .select(bands)
              .map(function(image) {
                    return image.clip(roi);
                  })
              .sort("system:time_start")
              .median();

Map.addLayer(l8_1910,visParams, 'l8_1910');
Map.addLayer(l8_1911,visParams, 'l8_1911');
Map.addLayer(l8_200218,visParams, 'l8_200218');
Map.addLayer(l8_200321,visParams, 'l8_200321');
Map.addLayer(l8_200422,visParams, 'l8_200422');
function maskS2clouds(image) {
  var qa = image.select('QA60');
  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  return image.updateMask(mask).divide(10000);
}

//NDVI: (B05 - B04)/(B05 + B04)
function NDVI1(img) {
  var ndvi = img.normalizedDifference(["B8","B4"]);
  return img.addBands(ndvi.rename("NDVI1"));
}
var bands=["NDVI1"];
var s2_2001 = ee.ImageCollection('COPERNICUS/S2_SR')
              .filterBounds(roi)
              .filterDate("2020-01-01", "2020-01-31")
             .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',30))
              //.map(rmCloud)
              .map(maskS2clouds)
              .map(NDVI1)
              .select(bands)
              .map(function(image) {
                    return image.clip(roi);
                  })
              .sort("system:time_start")
              .median()
              .reproject('EPSG:4326', null, 30);  
Map.addLayer(s2_2001,visParams, 's2_2001');
var l8_1920 =l8_1910.addBands(l8_1911)
                    .addBands(s2_2001)
                    .addBands(l8_200218)
                    .addBands(l8_200321)
                    .addBands(l8_200422);
                    
print("select l8", l8_1920);

Export.image.toDrive({
  image:l8_1920,
  description:'jinxiang_1920_NDVI',
  fileNamePrefix: "jinxiang_1920_NDVI",
  folder:"garlic_jinxiang",
  region: roi,
  scale:30,
  crs: "EPSG:4326", 
  maxPixels:1e13   
});

var visParams = {
  //bands: ['B4', 'B3', 'B2'],
  min: 0,
  max: 1,
  palette: ["000000", "00ff00"]
};

var max = l8_1920.reduce(ee.Reducer.max());
print("image reduce value is: ", max);
Map.addLayer(max, {}, "maxImage");
var winter_crop1=max.gt(0.5);//max_value
print("winter_crop1",winter_crop1);
Map.addLayer(winter_crop1, {}, "winter_crop1");

var winter_crop2=l8_1920.reduce({//axis:5,
                                reducer:ee.Reducer.sum()})
                                .gt(2.5);//3.2
print("select winter_crop2", winter_crop2);
Map.addLayer(winter_crop2,visParams, 'winter_crop2');
var winter_crop=winter_crop1.and(winter_crop2);
print("select winter_crop", winter_crop);
Map.addLayer(winter_crop,visParams, 'winter_crop');

Export.image.toDrive({
  image:winter_crop,
  description:'map_winter_crop',
  fileNamePrefix: "map_winter_crop",
  folder:"map_winter_crop",
  region: roi,
  scale:30,
  crs: "EPSG:4326", 
  maxPixels:1e13   
});

Export.image.toAsset({
      image: winter_crop, 
      description: 'map_winter_crop', 
      assetId: 'map_winter_crop',
      region: roi,
      scale: 30,
      crs: "EPSG:4326",
      maxPixels: 1e13
});
//---------------Rewrite the path-------------------------------------------
var wheat=ee.Image("**********/map_winter_wheat");

Map.centerObject(roi,8);

var visParams = {
  //bands: ['B4', 'B3', 'B2'],
  min: 0,
  max: 1,
  palette: ["000000", "00ff00"]
};


Map.addLayer(wheat,visParams, 'wheat');
var winter_wheat=winter_crop.and(wheat);
print("select winter_wheat", winter_wheat);
Map.addLayer(winter_wheat,visParams, 'winter_wheat');
var garlic=winter_crop.bitwiseXor(winter_wheat);
print("select garlic", garlic);
Map.addLayer(garlic,visParams, 'garlic');

var bounds = ee.Image().toByte()
               .paint({
                 featureCollection: roi,
                 color: null, 
                 width: 1
               });

Map.addLayer(bounds, {palette: "blue"}, "bounds");
Export.image.toDrive({
  image:garlic,
  description:'map_garlic',
  fileNamePrefix: "map_garlic",
  folder:"map_garlic",
  region: roi,
  scale:30,
  crs: "EPSG:4326", 
  maxPixels:1e13   
});

var sum=garlic.reduceRegion({
                reducer:ee.Reducer.sum(),
                geometry:roi,
                scale:30,
                maxPixels:1e13
              });
print("sum",sum);
